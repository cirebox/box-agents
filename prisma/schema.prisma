// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelos para Agentes (existentes)
model Agent {
  id              String   @id
  role            String
  goal            String
  backstory       String
  tools           String? // JSON string
  allowDelegation Boolean  @default(false)
  modelName       String   @default("gpt-4")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relacionamentos
  crews         CrewAgent[]
  executions    TaskExecution[]
  assignedTasks Task[] // Tarefas designadas a este agente
}

model Crew {
  id          String   @id
  name        String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  agents        CrewAgent[]
  tasks         CrewTask[]
  executions    TaskExecution[]
  assignedTasks Task[] // Tarefas designadas a esta equipe
}

model CrewAgent {
  id        String   @id @default(uuid())
  crewId    String
  agentId   String
  createdAt DateTime @default(now())

  // Relacionamentos
  crew  Crew  @relation(fields: [crewId], references: [id], onDelete: Cascade)
  agent Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@unique([crewId, agentId])
}

// Modelos para Task (novos)
model Task {
  id              String    @id
  description     String
  expectedOutput  String?
  context         String? // JSON string
  priority        String    @default("medium") // 'low', 'medium', 'high', 'critical'
  deadline        DateTime?
  assignedAgentId String?
  assignedCrewId  String?
  dependencies    String? // JSON string array
  tags            String? // JSON string array
  templateId      String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relacionamentos
  executions TaskExecution[]
  crews      CrewTask[]

  // Relacionamentos com modelos existentes
  assignedAgent Agent?        @relation(fields: [assignedAgentId], references: [id])
  assignedCrew  Crew?         @relation(fields: [assignedCrewId], references: [id])
  template      TaskTemplate? @relation(fields: [templateId], references: [id])

  // Índices para melhorar performance em consultas comuns
  @@index([createdAt])
  @@index([priority])
  @@index([assignedAgentId])
  @@index([assignedCrewId])
  @@index([templateId])
}

model CrewTask {
  id        String   @id @default(uuid())
  crewId    String
  taskId    String
  createdAt DateTime @default(now())

  // Relacionamentos
  crew Crew @relation(fields: [crewId], references: [id], onDelete: Cascade)
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([crewId, taskId])
}

model TaskExecution {
  id            String    @id @default(uuid())
  taskId        String
  agentId       String
  crewId        String?
  input         String // JSON string
  output        String?
  status        String // 'pending', 'in-progress', 'completed', 'failed', 'cancelled', 'waiting', 'retrying'
  executionTime Int? // em milissegundos
  error         String?
  attempts      Int       @default(1)
  logs          String // JSON string array
  metrics       String? // JSON string
  startedAt     DateTime  @default(now())
  finishedAt    DateTime?

  // Relacionamentos
  task  Task  @relation(fields: [taskId], references: [id], onDelete: Cascade)
  agent Agent @relation(fields: [agentId], references: [id])
  crew  Crew? @relation(fields: [crewId], references: [id])

  // Índices para consultas comuns
  @@index([status])
  @@index([startedAt])
  @@index([taskId])
  @@index([agentId])
  @@index([crewId])
}

model TaskTemplate {
  id               String   @id @default(uuid())
  name             String
  description      String
  promptTemplate   String   @db.Text
  defaultModelName String?
  parameters       String // JSON string array
  category         String
  tags             String? // JSON string array
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relacionamentos
  tasks Task[]

  // Índices
  @@index([category])
  @@index([name])
}
